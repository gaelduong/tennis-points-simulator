Tennis court: 23.77, 8.23


Court:          L     M     R
                3 2 1 0 1 2 3
Deep            x x x x x x x
Somewhat deep   x x x x x x x
Normal          x x x x x x x
Somewhat short  x x x x x x x
Short           x x x x x x x
Dropshot        x x x x x x x

Receive dist: Far, normal, close (half volley)

Input: csv
serve, middle, long, receive: normal
fh, right, normal depth, receive: normal
fh, a bit  left, short, receive: normal
bh, bit left,short, receive: normal
fh, right, deep, receive: normal
fh, far left, normal, receive: normal

player1 curr pos = [x,y]
player2 curr pos = [x,y]

shots = [
    {
        player: 1,
        shot: bh,
        direction: right,
        depth: short
        opn_contact_dist: normal
        ...
    },
    {
        player: 2,
        shot: fh,
        direction: right,
        depth: long
        opn_contact_dist: far
        ...
    },
]


shots[0].direction + shots[0].depth => get the position where the ball landed X
currContactPos (x,y) + X + opn_contact_dist=> compute contact position [x,y] C 

generateFrame() // start frame
    currContactPos => draw player dot (black dot)

------

generateFrame() //f1:
    X => draw landing point (yellow dot)
    currContactPos + X + opn_contact_dist => draw hitting line (red line)

generateFrame() //f2: 
    C => draw opponent dot (black dot)
...then updateOppPos()


generateFrame():
    draw player (x,y)
    draw opponent(x,y)
    draw dot(x,y)
    draw shot line(a,b)




Pseudocode:

shots = [
    {
        player: 1,
        shot: bh,
        direction: right,
        depth: short
        opn_contact_dist: normal
        ...
    },
    {
        player: 2,
        shot: fh,
        direction: right,
        depth: long
        opn_contact_dist: far
        ...
    },
]


// server.js

// ...Receive shots as data from client

let p1Pos = [x1,y1]
let p2Pos = [x2,y2]

let currentPlayer = 0

const playersPosMap={
    0: p1Pos,
    1: p2Pos
}

const framesData = []

for shot of shots:
    // Get players
    currPlayerPos = playersPosMap[currentPlayer]
    currOponnentPos = playersPosMap[!currentPlayer]

    // Compute relevant data (X=landSpotPos, C=receivingContactPos)
    landSpotPos = getSpot(shot.direction, shot.depth)
    receivingContactPos = getReceivingContactPos(currPlayerPos, landSpotPos, shot.opn_contact_dist)

    // Generate 2 frames data
    framesData.push({currPlayerPos, currOponnentPos, landSpotPos, receivingContactPos})
    framesData.push(currPlayerPos, receivingContactPos, landSpotPos, receivingContactPos})

    // Update opponent position
    currOponnentPos = receivingContactPos // (p1Pos or p2Pos)
    currentPlayer = !currentPlayer


// ...Server responds framesData back to client

// client.js

// ... Client receives framesData from server

drawFrame(playerPosition, opponentPosition, landSpot, receivingContactPosition):
    // draw on div (or canvas)
    drawPlayer (playerPosition)
    draw opponent(opponentPosition)
    draw(landSpot)
    draw shot line(playerPosition,receivingContactPosition)


// index.html

<input Simulate onSubmit=POST(server,{shots})>
<div background=tennisCourt/>
<button back onClick='handleDrawFrame'> <button forward onClick='handleDrawFrame'>


currFrameId = 0
handleDrawFrame(k):
    const {currPlayerPos, currOponnentPos, landSpotPos, receivingContactPos} = frameData[currFrameId]
    drawFrame(currPlayerPos, currOponnentPos, landSpotPos, receivingContactPos)
    currFrameId += k