{"version":3,"sources":["Court.js","Util.js","ShotsInputForm.js","App.js","index.js"],"names":["Court","id","x","y","width","height","style","fill","d","stroke","strokeWidth","shotTypes","directions","depths","filterAndBuildData","text","data","lines","split","filter","line","length","Error","forEach","attr","idx","replace","shotType","direction","depth","includes","push","e","ShotsInputForm","setFramesData","resetFrame","useState","setText","isCopied","setIsCopied","submitMessage","setSubmitMessage","codeSnippet","handleSubmit","a","preventDefault","shotsData","axios","post","shots","console","log","onSubmit","fontSize","spellCheck","value","onChange","target","className","onClick","type","onCopy","setTimeout","App","hittingPlayer","setHittingPlayer","shotTypeData","setShotTypeData","player1Pos","setPlayer1Pos","player2Pos","setPlayer2Pos","landSpotPos","setLandSpotPos","receivingContactPos","setReceivingContactPos","framesData","currentFrameId","setCurrentFrameId","useEffect","currentFrame","handleFrameChange","k","background","playerStyle","hittingLineStyle","hittingPlayerPos","cx","cy","r","x1","y1","x2","y2","opacity","textPos","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aad20010.chunk.js","sourcesContent":["import { React } from \"react\";\r\n\r\nconst Court = () => {\r\n  const courtStyle = {\r\n    fill: \"#559adc\",\r\n  };\r\n  return (\r\n    <g id=\"court\">\r\n      <rect x=\"100\" y=\"75\" width=\"300\" height=\"500\" style={courtStyle} />\r\n      <g id=\"court-borders\">\r\n        <path\r\n          d=\"M 100 75 V 575 \"\r\n          stroke=\"#fff\"\r\n          strokeWidth=\"5\"\r\n          fill=\"transparent\"\r\n        />\r\n        <path\r\n          d=\"M 400 75 V 575 \"\r\n          stroke=\"#fff\"\r\n          strokeWidth=\"5\"\r\n          fill=\"transparent\"\r\n        />\r\n\r\n        <path\r\n          d=\"M 97.5 75 H 402.5 \"\r\n          stroke=\"#fff\"\r\n          strokeWidth=\"5\"\r\n          fill=\"transparent\"\r\n        />\r\n\r\n        <path\r\n          d=\"M 97.5 575 H 402.5 \"\r\n          stroke=\"#fff\"\r\n          strokeWidth=\"5\"\r\n          fill=\"transparent\"\r\n        />\r\n      </g>\r\n\r\n      <g id=\"court-double-alley-lines\">\r\n        <path\r\n          d=\"M 130 75 V 575 \"\r\n          stroke=\"#fff\"\r\n          strokeWidth=\"5\"\r\n          fill=\"transparent\"\r\n        />\r\n        <path\r\n          d=\"M 370 75 V 575 \"\r\n          stroke=\"#fff\"\r\n          strokeWidth=\"5\"\r\n          fill=\"transparent\"\r\n        />\r\n      </g>\r\n      <g id=\"court-center-mark\">\r\n        <path\r\n          d=\"M 250 75 V 85 \"\r\n          stroke=\"#fff\"\r\n          strokeWidth=\"5\"\r\n          fill=\"transparent\"\r\n        />\r\n        <path\r\n          d=\"M 250 575 V 565 \"\r\n          stroke=\"#fff\"\r\n          strokeWidth=\"5\"\r\n          fill=\"transparent\"\r\n        />\r\n      </g>\r\n\r\n      <g id=\"court-net\">\r\n        <path\r\n          d=\"M 100 325 H 400 \"\r\n          stroke=\"#fff\"\r\n          strokeWidth=\"5\"\r\n          fill=\"transparent\"\r\n        />\r\n      </g>\r\n\r\n      <g id=\"court-service-lines\">\r\n        <path\r\n          d=\"M 130 200 H 370 \"\r\n          stroke=\"#fff\"\r\n          strokeWidth=\"5\"\r\n          fill=\"transparent\"\r\n        />\r\n        <path\r\n          d=\"M 130 450 H 370 \"\r\n          stroke=\"#fff\"\r\n          strokeWidth=\"5\"\r\n          fill=\"transparent\"\r\n        />\r\n      </g>\r\n\r\n      <g id=\"court-center-service-lines\">\r\n        <path\r\n          d=\"M 250 325 V 200 \"\r\n          stroke=\"#fff\"\r\n          strokeWidth=\"5\"\r\n          fill=\"transparent\"\r\n        />\r\n        <path\r\n          d=\"M 250 325 V 450 \"\r\n          stroke=\"#fff\"\r\n          strokeWidth=\"5\"\r\n          fill=\"transparent\"\r\n        />\r\n      </g>\r\n    </g>\r\n  );\r\n};\r\n\r\nexport default Court;\r\n","const shotTypes = [\"neutral\", \"topspin\", \"slice\"];\r\nconst directions = [\r\n  \"farLeft\",\r\n  \"left\",\r\n  \"somewhatLeft\",\r\n  \"middle\",\r\n  \"somewhatRight\",\r\n  \"right\",\r\n  \"farRight\",\r\n];\r\nconst depths = [\r\n  \"deep\",\r\n  \"somewhatDeep\",\r\n  \"normal\",\r\n  \"somewhatShort\",\r\n  \"short\",\r\n  \"veryShort\",\r\n];\r\n\r\nexport const filterAndBuildData = (text) => {\r\n  const data = [];\r\n  // Filter textarea\r\n  try {\r\n    let lines = text.split(\"\\n\");\r\n    lines = lines.filter((line) => line.length > 0);\r\n    if (!lines.length) throw new Error(\"Wrong input\");\r\n    lines.forEach((line) => {\r\n      line = line.split(\",\");\r\n\r\n      line.forEach((attr, idx) => {\r\n        line[idx] = attr.replace(/\\s/g, \"\");\r\n      });\r\n      // Build data\r\n      const [shotType, direction, depth] = line;\r\n      if (\r\n        !shotTypes.includes(shotType) ||\r\n        !directions.includes(direction) ||\r\n        !depths.includes(depth)\r\n      ) {\r\n        throw new Error(\"Wrong input\");\r\n      }\r\n      data.push({\r\n        shotType,\r\n        direction,\r\n        depth,\r\n      });\r\n    });\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n  return data;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { filterAndBuildData } from \"./Util.js\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport { MdContentCopy } from \"react-icons/md\";\r\n\r\nconst serverUrl = \"http://localhost:5000\";\r\n\r\nconst ShotsInputForm = ({ setFramesData, resetFrame }) => {\r\n  const [text, setText] = useState(\"\");\r\n  const [isCopied, setIsCopied] = useState(false);\r\n  const [submitMessage, setSubmitMessage] = useState(\"\");\r\n\r\n  const codeSnippet = `  slice, farRight, deep\r\n  topspin, left, normal\r\n  slice, farRight, deep\r\n  slice, farLeft, veryShort\r\n  neutral, farRight, veryShort\r\n  slice, farRight, deep`;\r\n\r\n  const onCopyText = () => {\r\n    setIsCopied(true);\r\n    setTimeout(() => {\r\n      setIsCopied(false);\r\n    }, 1000);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const shotsData = filterAndBuildData(text);\r\n    // Need to check if shotsData contains valid attributes\r\n    if (!shotsData) return setSubmitMessage(\"Wrong input! Check again.\");\r\n    try {\r\n      const { data } = await axios.post(`${serverUrl}/simulate`, {\r\n        shots: shotsData,\r\n      });\r\n      setFramesData(data);\r\n      setSubmitMessage(\"\");\r\n    } catch (error) {\r\n      return console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <h2>Tennis Rally Simulator</h2>\r\n        <label>\r\n          🌍 Input multiple lines where each line represents a single shot hit\r\n          by either player 1 or player 2.\r\n        </label>\r\n        <label>\r\n          🌍 Each shot is described by 3 propreties: shot type, direction and\r\n          depth.\r\n        </label>\r\n        <label>\r\n          ⭐️\r\n          <b>\r\n            <i>\r\n              For now player on the bottom (player 1) always starts hitting\r\n              first.\r\n            </i>\r\n          </b>\r\n        </label>\r\n        <label>\r\n          ⭐️\r\n          <b>\r\n            <i>For now last shot is assumed to be a winner shot.</i>\r\n          </b>\r\n        </label>\r\n        <pre id=\"input-instructions\">\r\n          <label>\r\n            <b>Shot type: </b> slice | topspin | neutral\r\n          </label>\r\n          <label>\r\n            <b>Direction:</b> farLeft | left | somewhatLeft | middle |\r\n            somewhatRight | right | farRight\r\n          </label>\r\n          <label>\r\n            <b>Depth:</b> deep | somewhatDeep | normal | somewhatShort | short |\r\n            veryShort\r\n          </label>\r\n          <br></br>\r\n          <label>\r\n            <b>Input order (for each line):</b> [shot type], [direction],\r\n            [depth]\r\n          </label>\r\n        </pre>\r\n        <label>\r\n          👉 Input rally here:{\" \"}\r\n          <span style={{ fontSize: \"12px\" }}>\r\n            (line 1=shot hit by player 1, line 2=shot hit by player 2, line\r\n            3=shot hit by player 1,...)\r\n          </span>\r\n        </label>\r\n        <textarea\r\n          spellCheck=\"false\"\r\n          value={text}\r\n          onChange={(e) => setText(e.target.value)}\r\n        ></textarea>\r\n        {submitMessage && <div id=\"submit-message\"> {submitMessage} </div>}\r\n        <button className=\"action-btn\" id=\"simulate-btn\" onClick={handleSubmit}>\r\n          Simulate rally!\r\n        </button>\r\n        <button\r\n          className=\"action-btn\"\r\n          id=\"reset-btn\"\r\n          type=\"button\"\r\n          onClick={() => {\r\n            resetFrame();\r\n            setText(\"\");\r\n          }}\r\n        >\r\n          Reset\r\n        </button>\r\n        <label>Example of a rally:</label>\r\n        <div className=\"container\">\r\n          <div className=\"code-snippet\">\r\n            <div className=\"code-section\">\r\n              <pre>{codeSnippet}</pre>\r\n              <CopyToClipboard text={codeSnippet} onCopy={onCopyText}>\r\n                <span>\r\n                  {isCopied ? \"Copied!\" : <pre id=\"copy-btn\"> Copy</pre>}\r\n                </span>\r\n              </CopyToClipboard>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShotsInputForm;\r\n","import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Court from \"./Court.js\";\nimport ShotsInputForm from \"./ShotsInputForm.js\";\n\nfunction App() {\n  const [hittingPlayer, setHittingPlayer] = useState(-1);\n  const [shotTypeData, setShotTypeData] = useState(\"\");\n  const [player1Pos, setPlayer1Pos] = useState([300, 590]);\n  const [player2Pos, setPlayer2Pos] = useState([170, 50]);\n  const [landSpotPos, setLandSpotPos] = useState([]);\n  const [receivingContactPos, setReceivingContactPos] = useState([]);\n  const [framesData, setFramesData] = useState([]);\n  const [currentFrameId, setCurrentFrameId] = useState(-1);\n\n  useEffect(() => {\n    if (!framesData.length) return;\n    const currentFrame = framesData[0];\n    if (currentFrame) {\n      setHittingPlayer(currentFrame.hittingPlayer);\n      setShotTypeData(currentFrame.shotTypeData);\n      setPlayer1Pos(currentFrame.player1Pos);\n      setPlayer2Pos(currentFrame.player2Pos);\n      setLandSpotPos(currentFrame.landSpotPos);\n      setReceivingContactPos(currentFrame.receivingContactPos);\n    }\n    setCurrentFrameId(0);\n  }, [framesData]);\n\n  const resetFrame = () => {\n    setFramesData([]);\n    setCurrentFrameId(-1);\n    setHittingPlayer(-1);\n    setPlayer1Pos([300, 590]);\n    setPlayer2Pos([170, 50]);\n    setLandSpotPos([]);\n    setReceivingContactPos([]);\n  };\n\n  const handleFrameChange = (e, k) => {\n    if (!framesData.length) return;\n    if (currentFrameId <= 0 && k === -1) return;\n    // if (currentFrameId === framesData.length - 1 && k === 1) {\n    //   return;\n    // }\n    setCurrentFrameId((currentFrameId) => {\n      currentFrameId =\n        currentFrameId + k >= framesData.length ? 0 : currentFrameId + k;\n      const currentFrame = framesData[currentFrameId];\n      if (currentFrame) {\n        setHittingPlayer(currentFrame.hittingPlayer);\n        setShotTypeData(currentFrame.shotTypeData);\n        setPlayer1Pos(currentFrame.player1Pos);\n        setPlayer2Pos(currentFrame.player2Pos);\n        setLandSpotPos(currentFrame.landSpotPos);\n        setReceivingContactPos(currentFrame.receivingContactPos);\n      }\n      return currentFrameId;\n    });\n  };\n\n  const style = {\n    width: \"500px\",\n    height: \"650px\",\n    background: \"#a8d76c\",\n    // transform: \"matrix(1,0, 0, -1 300/2 500/2)\",\n  };\n\n  const playerStyle = {\n    fill: \"black\",\n  };\n\n  const hittingLineStyle = {\n    stroke: hittingPlayer ? \"red\" : \"blue\",\n    strokeWidth: 2,\n  };\n\n  const landSpotStyle = {\n    fill: \"black\",\n    opacity: \"40%\",\n  };\n\n  const ballStyle = {\n    fill: \"#f5fc8d\",\n    stroke: \"black\",\n    strokeWidth: 2,\n  };\n\n  const hittingPlayerPos = hittingPlayer === 0 ? player1Pos : player2Pos;\n\n  return (\n    <div className=\"App\">\n      <ShotsInputForm setFramesData={setFramesData} resetFrame={resetFrame} />\n      {/* Display dummy court with instructions */}\n      {currentFrameId === -1 && (\n        <svg style={style}>\n          <Court />\n          {/* 2 players */}\n          <circle\n            cx={player1Pos[0]}\n            cy={player1Pos[1]}\n            r={10}\n            style={playerStyle}\n          />\n          <circle\n            cx={player2Pos[0]}\n            cy={player2Pos[1]}\n            r={10}\n            style={playerStyle}\n          />\n          <text x={280} y={620}>\n            Player 1\n          </text>\n          <text x={140} y={30}>\n            Player 2\n          </text>\n          <text x={10} y={330}>\n            LEFT\n          </text>\n          <text x={440} y={330}>\n            RIGHT\n          </text>\n\n          <text x={230} y={560}>\n            DEEP\n          </text>\n          <text x={230} y={100}>\n            DEEP\n          </text>\n        </svg>\n      )}\n\n      {/* Display actual court simulation */}\n      {currentFrameId !== -1 && (\n        <div>\n          <svg style={style}>\n            <Court />\n            {/* 2 players */}\n            <circle\n              cx={player1Pos[0]}\n              cy={player1Pos[1]}\n              r={10}\n              style={playerStyle}\n            />\n            <circle\n              cx={player2Pos[0]}\n              cy={player2Pos[1]}\n              r={10}\n              style={playerStyle}\n            />\n            {landSpotPos && (\n              <g>\n                {/* Hitting lines */}\n                <line\n                  x1={hittingPlayerPos[0]}\n                  y1={hittingPlayerPos[1]}\n                  x2={landSpotPos[0]}\n                  y2={landSpotPos[1]}\n                  style={hittingLineStyle}\n                />\n                <line\n                  x1={landSpotPos[0]}\n                  y1={landSpotPos[1]}\n                  x2={receivingContactPos[0]}\n                  y2={receivingContactPos[1]}\n                  style={hittingLineStyle}\n                />\n                {/* Landing spot */}\n                <circle\n                  cx={landSpotPos[0]}\n                  cy={landSpotPos[1]}\n                  r={4}\n                  style={landSpotStyle}\n                />\n                {/* The ball */}\n                <circle\n                  cx={receivingContactPos[0]}\n                  cy={receivingContactPos[1]}\n                  r={7}\n                  style={ballStyle}\n                />\n                {shotTypeData.textPos && (\n                  <text x={shotTypeData.textPos[0]} y={shotTypeData.textPos[1]}>\n                    {shotTypeData.type}\n                  </text>\n                )}\n              </g>\n            )}\n          </svg>\n\n          <div>\n            <div>\n              <button\n                className=\"action-btn control-btn\"\n                onClick={(e) => handleFrameChange(e, -1)}\n              >\n                Back\n              </button>\n              <button\n                className=\"action-btn control-btn\"\n                onClick={(e) => handleFrameChange(e, 1)}\n              >\n                Next\n              </button>\n            </div>\n            <div>\n              {currentFrameId + 1} / {framesData.length}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}